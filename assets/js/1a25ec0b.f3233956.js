"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[19],{5318:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var a=t(7378);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(t),d=i,k=c["".concat(s,".").concat(d)]||c[d]||u[d]||l;return t?a.createElement(k,r(r({ref:n},m),{},{components:t})):a.createElement(k,r({ref:n},m))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6666:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var a=t(5773),i=t(808),l=(t(7378),t(5318)),r=["components"],o={title:"Features & optimizations"},s=void 0,p={unversionedId:"features",id:"features",title:"Features & optimizations",description:"Babel configuration",source:"@site/docs/features.md",sourceDirName:".",slug:"/features",permalink:"/docs/features",editUrl:"https://github.com/milesj/packemon/edit/master/website/docs/features.md",tags:[],version:"current",frontMatter:{title:"Features & optimizations"},sidebar:"docs",previous:{title:"Setup & requirements",permalink:"/docs/setup"},next:{title:"Package configuration",permalink:"/docs/config"}},m={},u=[{value:"Babel configuration",id:"babel-configuration",level:2},{value:"Presets",id:"presets",level:3},{value:"Plugins",id:"plugins",level:3},{value:"Rollup configuration",id:"rollup-configuration",level:2},{value:"Plugins",id:"plugins-1",level:3},{value:"Development and production targets",id:"development-and-production-targets",level:2},{value:"Tree-shaking optimization",id:"tree-shaking-optimization",level:2},{value:"Code-splitting aware",id:"code-splitting-aware",level:2},{value:"React JSX transforms",id:"react-jsx-transforms",level:2},{value:"Asset imports",id:"asset-imports",level:2},{value:"Environment constants",id:"environment-constants",level:2},{value:"Invariant checks",id:"invariant-checks",level:2},{value:"Automatic <code>.mjs</code> wrappers for <code>.cjs</code> inputs",id:"automatic-mjs-wrappers-for-cjs-inputs",level:2},{value:"CommonJS &amp; ECMAScript interoperability",id:"commonjs--ecmascript-interoperability",level:2}],c={toc:u};function d(e){var n=e.components,t=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"babel-configuration"},"Babel configuration"),(0,l.kt)("p",null,"All packages are parsed and transpiled with ",(0,l.kt)("a",{parentName:"p",href:"https://babeljs.io"},"Babel")," (through Rollup). The presets and plugins\nused are automatically determined on a package-by-package basis, by inspecting the package's root\nfiles and respective ",(0,l.kt)("inlineCode",{parentName:"p"},"package.json")," (and root ",(0,l.kt)("inlineCode",{parentName:"p"},"package.json")," if using workspaces)."),(0,l.kt)("h3",{id:"presets"},"Presets"),(0,l.kt)("p",null,"The environment preset is always enabled and configures the following."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@babel/preset-env"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Defines ",(0,l.kt)("inlineCode",{parentName:"li"},"modules")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"targets")," based on the chosen ",(0,l.kt)("a",{parentName:"li",href:"/docs/config#platforms"},"platform")," and\n",(0,l.kt)("a",{parentName:"li",href:"/docs/config#formats"},"format"),"."),(0,l.kt)("li",{parentName:"ul"},"Enables ",(0,l.kt)("inlineCode",{parentName:"li"},"spec")," in development for testing compliance."),(0,l.kt)("li",{parentName:"ul"},"Enables ",(0,l.kt)("inlineCode",{parentName:"li"},"bugfixes")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"shippedProposals")," for smaller file sizes."),(0,l.kt)("li",{parentName:"ul"},"Disables ",(0,l.kt)("inlineCode",{parentName:"li"},"useBuiltIns")," as consumers of the package should polyfill accordingly.")))),(0,l.kt)("p",null,"The following presets are enabled when one of their conditions are met."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@babel/preset-flow"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Package or root contains a ",(0,l.kt)("inlineCode",{parentName:"li"},"flow-bin")," dependency."),(0,l.kt)("li",{parentName:"ul"},"Project contains a ",(0,l.kt)("inlineCode",{parentName:"li"},".flowconfig"),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@babel/preset-typescript"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Package or root contains a ",(0,l.kt)("inlineCode",{parentName:"li"},"typescript")," dependency."),(0,l.kt)("li",{parentName:"ul"},"Package contains a ",(0,l.kt)("inlineCode",{parentName:"li"},"tsconfig.json"),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@babel/preset-react"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Package contains a ",(0,l.kt)("inlineCode",{parentName:"li"},"react")," dependency."),(0,l.kt)("li",{parentName:"ul"},"Enables the new ",(0,l.kt)("a",{parentName:"li",href:"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html"},"JSX transform")," if the dependency range captures the minimum requirement.")))),(0,l.kt)("h3",{id:"plugins"},"Plugins"),(0,l.kt)("p",null,"The following plugins are enabled when one of their conditions are met."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@babel/plugin-proposal-decorators"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Enabled when package is TypeScript aware and defines ",(0,l.kt)("inlineCode",{parentName:"li"},"experimentalDecorators")," in\n",(0,l.kt)("inlineCode",{parentName:"li"},"tsconfig.json"),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@babel/plugin-transform-runtime"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Enabled when package ",(0,l.kt)("a",{parentName:"li",href:"/docs/config#platforms"},"platform")," is configured to ",(0,l.kt)("inlineCode",{parentName:"li"},"browser")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"native"),".\nWill transform generators to ",(0,l.kt)("inlineCode",{parentName:"li"},"regnerator-runtime")," for legacy versions."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#environment-constants"},(0,l.kt)("inlineCode",{parentName:"a"},"babel-plugin-env-constants")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Always enabled. Will transform ",(0,l.kt)("inlineCode",{parentName:"li"},"__DEV__"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"__PROD__"),", and ",(0,l.kt)("inlineCode",{parentName:"li"},"__TEST__")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"process.env.NODE_ENV"),"\nexpressions."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#invariant-checks"},(0,l.kt)("inlineCode",{parentName:"a"},"babel-plugin-conditional-invariant")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Always enabled. Will wrap ",(0,l.kt)("inlineCode",{parentName:"li"},"invariant()")," calls with ",(0,l.kt)("inlineCode",{parentName:"li"},"process.env.NODE_ENV")," conditionals."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#cjs--esm-interoperability"},(0,l.kt)("inlineCode",{parentName:"a"},"babel-plugin-cjs-esm-interop")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Enabled when package ",(0,l.kt)("a",{parentName:"li",href:"/docs/config#platforms"},"platform")," is configured to ",(0,l.kt)("inlineCode",{parentName:"li"},"node"),". Will convert ESM\ncode to CJS and vice-versa.")))),(0,l.kt)("h2",{id:"rollup-configuration"},"Rollup configuration"),(0,l.kt)("p",null,"While Babel handles the parsing and transformation of source files, ",(0,l.kt)("a",{parentName:"p",href:"https://rollupjs.org"},"Rollup")," bundles all\nentry point dependent source files into a single tree-shaken distributable file. This vastly reduces\nthe file size, require/import times, evaluation speed, and more."),(0,l.kt)("p",null,'However, configuring Rollup can be quite daunting. Because of this, the entire layer is abstracted\naway behind Packemon, and should just "work" when packages are configured correctly. Our abstraction\nabides the following:'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"For every input in a package's ",(0,l.kt)("a",{parentName:"li",href:"/docs/config#inputs"},"inputs")," setting, an output file will be\ncreated."),(0,l.kt)("li",{parentName:"ul"},"For every ",(0,l.kt)("a",{parentName:"li",href:"/docs/config#platforms"},"platform")," and ",(0,l.kt)("a",{parentName:"li",href:"/docs/config#formats"},"format")," in a package, a\nunique output file will be created."),(0,l.kt)("li",{parentName:"ul"},"Every Node.js built-in module is configured as external."),(0,l.kt)("li",{parentName:"ul"},"Every package dependency is configured as external."),(0,l.kt)("li",{parentName:"ul"},"Always reduces file size as much as possible by utilizing tree-shaking."),(0,l.kt)("li",{parentName:"ul"},'Allows input files to reference other input files to mitigate "instance of" and "reference"\nissues.')),(0,l.kt)("h3",{id:"plugins-1"},"Plugins"),(0,l.kt)("p",null,"The following plugins are enabled per package."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@rollup/plugin-node-resolve"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Resolves imports using Node.js module resolution."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@rollup/plugin-commonjs"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Converts CommonJS externals to ECMAScript for bundling capabilities."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@rollup/plugin-json"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Allows JSON files to be imported (default export only)."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@rollup/plugin-babel"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Parses and transforms source code using Babel."),(0,l.kt)("li",{parentName:"ul"},"Excludes test related files from transformation."),(0,l.kt)("li",{parentName:"ul"},"Inlines runtime helpers in the output file."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"rollup-plugin-node-externals"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Defines ",(0,l.kt)("inlineCode",{parentName:"li"},"externals")," based on ",(0,l.kt)("inlineCode",{parentName:"li"},"package.json")," dependencies."),(0,l.kt)("li",{parentName:"ul"},"Includes ",(0,l.kt)("inlineCode",{parentName:"li"},"dependencies"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"devDependencies"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"peerDependencies"),", and ",(0,l.kt)("inlineCode",{parentName:"li"},"optionalDependencies"),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"rollup-plugin-polyfill-node"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Polyfills Node.js built-in modules when platform is ",(0,l.kt)("inlineCode",{parentName:"li"},"browser")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"native"),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Custom"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Prepend a Node.js shebang to ",(0,l.kt)("inlineCode",{parentName:"li"},"bin.*")," output files."),(0,l.kt)("li",{parentName:"ul"},"Process imported assets and share between formats.")))),(0,l.kt)("h2",{id:"development-and-production-targets"},"Development and production targets"),(0,l.kt)("p",null,"Packemon configures Babel internally based on ",(0,l.kt)("inlineCode",{parentName:"p"},"NODE_ENV"),". When in development (default), code is\ntranspiled for spec compliance and debugging purposes, while in production for performance. We\nsuggest running ",(0,l.kt)("inlineCode",{parentName:"p"},"packemon build")," for development, and ",(0,l.kt)("inlineCode",{parentName:"p"},"packemon pack")," with environment variable for\nproduction (before a release)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"packemon build\nNODE_ENV=production packemon pack\n")),(0,l.kt)("h2",{id:"tree-shaking-optimization"},"Tree-shaking optimization"),(0,l.kt)("p",null,"When a package is ",(0,l.kt)("a",{parentName:"p",href:"/docs/config#bundle"},"bundled"),", tree-shaking and pure annotations are automatically\nenabled through the Rollup build. This feature also takes multiple inputs (entry points) into\naccount and chunks the bundled code accordingly."),(0,l.kt)("h2",{id:"code-splitting-aware"},"Code-splitting aware"),(0,l.kt)("p",null,"Make use of ",(0,l.kt)("inlineCode",{parentName:"p"},"import()")," and Packemon will ensure proper code-splitting for consumers. Packemon will\npersist dynamic imports when the the target platform and supported version can utilize the feature\nnatively, otherwise it is transpiled down."),(0,l.kt)("h2",{id:"react-jsx-transforms"},"React JSX transforms"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html"},"JSX")," supports 2 patterns for transforming code: the ",(0,l.kt)("inlineCode",{parentName:"p"},"classic")," pattern where\n",(0,l.kt)("inlineCode",{parentName:"p"},"import React from 'react'")," is required, and the new ",(0,l.kt)("inlineCode",{parentName:"p"},"automatic")," pattern where the import can be\nomitted. Packemon will automatically choose a pattern based on the ",(0,l.kt)("inlineCode",{parentName:"p"},"react")," dependency found in a\npackage's ",(0,l.kt)("inlineCode",{parentName:"p"},"package.json"),", by verifying the version satisfies the minimin requirement."),(0,l.kt)("p",null,"The version can be defined as a ",(0,l.kt)("inlineCode",{parentName:"p"},"peerDependencies"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "peerDependencies": {\n        "react": ">=17.0.0"\n    }\n}\n')),(0,l.kt)("p",null,"Or the version can be defined as a normal ",(0,l.kt)("inlineCode",{parentName:"p"},"dependencies"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "dependencies": {\n        "react": "^17.0.0"\n    }\n}\n')),(0,l.kt)("h2",{id:"asset-imports"},"Asset imports"),(0,l.kt)("p",null,"When a file imports an asset\n(",(0,l.kt)("a",{parentName:"p",href:"https://github.com/milesj/packemon/blob/master/packages/packemon/src/constants.ts#L12"},"styles, images, audio, video"),"),\nthe import remains in-tact so any bundlers can handle accordingly. However, assets are moved to a\nshared ",(0,l.kt)("inlineCode",{parentName:"p"},"assets")," folder, are hashed for uniqueness, and any imports are modified to this new path."),(0,l.kt)("p",null,"An example of this as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Input:\n//  src/components/Button/index.ts\n//  src/components/Button/button.css\nimport './button.css';\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Output:\n//  esm/components/Button/index.js\n//  assets/button-as17p2k9.css\nimport '../../../assets/button-as17p2k9.css';\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"UMD builds do not support asset imports!")),(0,l.kt)("h2",{id:"environment-constants"},"Environment constants"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/babel-plugin-env-constants"},"babel-plugin-env-constants")," plugin is\nalways enabled, which will transform ",(0,l.kt)("inlineCode",{parentName:"p"},"__DEV__"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"__PROD__"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"__TEST__")," constants to\n",(0,l.kt)("inlineCode",{parentName:"p"},"process.env.NODE_ENV")," conditionals."),(0,l.kt)("p",null,"When this code is ran through a minifier like Terser, any non-production checks will be removed\nthrough a process known as dead-code elimination. This will greatly reduce bundle size on consumers!"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Input\nif (__DEV__) {\n    console.log('Some message in development!');\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Output\nif (process.env.NODE_ENV !== 'production') {\n    console.log('Some message in development!');\n}\n")),(0,l.kt)("p",null,"If you are using TypeScript, you'll most likely need to declare the globals yourself."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"declare global {\n    var __DEV__: boolean;\n    var __PROD__: boolean;\n    var __TEST__: boolean;\n}\n")),(0,l.kt)("h2",{id:"invariant-checks"},"Invariant checks"),(0,l.kt)("p",null,"The\n",(0,l.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/babel-plugin-conditional-invariant"},"babel-plugin-conditional-invariant"),"\nplugin is always enabled, which will wrap ",(0,l.kt)("inlineCode",{parentName:"p"},"invariant()")," function checks in ",(0,l.kt)("inlineCode",{parentName:"p"},"process.env.NODE_ENV"),"\nconditionals that only run in development."),(0,l.kt)("p",null,"When this code is ran through a minifier like Terser, all invariant checks will be removed through a\nprocess known as dead-code elimination, just like environment constants above!"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Input\ninvariant(value === false, 'Value must be falsy!');\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Output\nif (process.env.NODE_ENV !== 'production') {\n    invariant(value === false, 'Value must be falsy!');\n}\n")),(0,l.kt)("h2",{id:"automatic-mjs-wrappers-for-cjs-inputs"},"Automatic ",(0,l.kt)("inlineCode",{parentName:"h2"},".mjs")," wrappers for ",(0,l.kt)("inlineCode",{parentName:"h2"},".cjs")," inputs"),(0,l.kt)("p",null,"Publishing a package that contains builds for both ",(0,l.kt)("inlineCode",{parentName:"p"},".cjs")," and ",(0,l.kt)("inlineCode",{parentName:"p"},".mjs")," may result in the\n",(0,l.kt)("a",{parentName:"p",href:"https://nodejs.org/api/packages.html#dual-commonjses-module-packages"},"dual package hazard")," problem.\nPackemon attempts to mitigate this problem by only allowing 1 format. However, when publishing\n",(0,l.kt)("inlineCode",{parentName:"p"},".cjs")," code, a consumer ",(0,l.kt)("em",{parentName:"p"},"cannot")," used named imports within an ",(0,l.kt)("inlineCode",{parentName:"p"},".mjs")," file as one would expect (since\nCommonJS has no concept of default and named exports), as demonstrated below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="package/cjs/index.cjs"',title:'"package/cjs/index.cjs"'},"exports.name = 'value';\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="index.mjs"',title:'"index.mjs"'},"// Invalid\nimport { name } from 'package';\n\n// Valid\nimport cjsPackage from 'package';\n\nconst { name } = cjsPackage;\n")),(0,l.kt)("p",null,"This is rather annoying, as it does not align with ",(0,l.kt)("inlineCode",{parentName:"p"},"import"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"export")," assumptions, and also makes it\nharder for consumers to migrate to ESM based code (",(0,l.kt)("inlineCode",{parentName:"p"},".mjs"),"). However, there is a solution to this\nproblem,\n",(0,l.kt)("a",{parentName:"p",href:"https://nodejs.org/api/packages.html#approach-1-use-an-es-module-wrapper"},"using an ESM wrapper"),".\nPackemon supports this as a first-class feature, and when the ",(0,l.kt)("a",{parentName:"p",href:"/docs/config#formats"},(0,l.kt)("inlineCode",{parentName:"a"},"format"))," is\n",(0,l.kt)("inlineCode",{parentName:"p"},"cjs"),", the following functionality is automatically enabled:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A wrapper ",(0,l.kt)("inlineCode",{parentName:"li"},".mjs")," file is emitted for each ",(0,l.kt)("a",{parentName:"li",href:"/docs/config#inputs"},"input"),", that re-exports all values\nfound in the base ",(0,l.kt)("inlineCode",{parentName:"li"},".cjs")," file."),(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"--addExports")," is enabled, will append an ",(0,l.kt)("inlineCode",{parentName:"li"},"import")," exports conditional.")),(0,l.kt)("p",null,"Based on this information and the examples above, our imports now work as expected!"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="package/cjs/index.cjs"',title:'"package/cjs/index.cjs"'},"exports.name = 'value';\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="package/cjs/index-wrapper.mjs"',title:'"package/cjs/index-wrapper.mjs"'},"import data from 'package';\n\nexport const { name } = data;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="index.mjs"',title:'"index.mjs"'},"// Works now!\nimport { name } from 'package';\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},'This is a great solution for packages that want to offer "modules" but are unable to fully migrate\nto ESM. If you ',(0,l.kt)("em",{parentName:"p"},"do not")," want this functionality, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"lib")," format instead.")),(0,l.kt)("h2",{id:"commonjs--ecmascript-interoperability"},"CommonJS & ECMAScript interoperability"),(0,l.kt)("p",null,"Packemon by default encourages ",(0,l.kt)("a",{parentName:"p",href:"/docs/esm"},"ECMAScript modules"),", but not everyone is there yet. To\nbridge this gap, we enable the\n",(0,l.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/babel-plugin-cjs-esm-interop"},"babel-plugin-cjs-esm-interop")," plugin,\nwhich transforms CommonJS code (",(0,l.kt)("inlineCode",{parentName:"p"},".cjs"),", ",(0,l.kt)("inlineCode",{parentName:"p"},".js"),") into ECMAScript module code (",(0,l.kt)("inlineCode",{parentName:"p"},".mjs"),", ",(0,l.kt)("inlineCode",{parentName:"p"},".js")," with\nmodule type), and vice versa, based on the\n",(0,l.kt)("a",{parentName:"p",href:"https://nodejs.org/api/esm.html#esm_differences_between_es_modules_and_commonjs"},"official Node.js documentation"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Input: mjs\nconst self = import.meta.url;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Output: cjs\nconst self = __filename;\n")))}d.isMDXComponent=!0}}]);
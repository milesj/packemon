"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[569],{5318:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(n),u=r,k=c["".concat(p,".").concat(u)]||c[u]||m[u]||o;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5171:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return m}});var a=n(5773),r=n(808),o=(n(7378),n(5318)),i=["components"],l={title:"3.0 migration",sidebar_label:"3.0"},p=void 0,s={unversionedId:"migrate/3.0",id:"migrate/3.0",title:"3.0 migration",description:"Shifted supported platform versions",source:"@site/docs/migrate/3.0.md",sourceDirName:"migrate",slug:"/migrate/3.0",permalink:"/docs/migrate/3.0",draft:!1,editUrl:"https://github.com/milesj/packemon/edit/master/website/docs/migrate/3.0.md",tags:[],version:"current",frontMatter:{title:"3.0 migration",sidebar_label:"3.0"},sidebar:"docs",previous:{title:"2.0",permalink:"/docs/migrate/2.0"}},d={},m=[{value:"Shifted supported platform versions",id:"shifted-supported-platform-versions",level:2},{value:"Before",id:"before",level:4},{value:"After",id:"after",level:4},{value:"Dropped ES5 support",id:"dropped-es5-support",level:3},{value:"No longer workspaces aware by default",id:"no-longer-workspaces-aware-by-default",level:2},{value:"Commands must now be ran from the package root",id:"commands-must-now-be-ran-from-the-package-root",level:2},{value:"TypeScript declarations now require explicitly named configs",id:"typescript-declarations-now-require-explicitly-named-configs",level:2},{value:"TypeScript declaration output directory has changed",id:"typescript-declaration-output-directory-has-changed",level:2},{value:"Package <code>exports</code> have changed",id:"package-exports-have-changed",level:2},{value:"Publishable files are now lenient",id:"publishable-files-are-now-lenient",level:2},{value:"Removed sourcemaps from Node.js",id:"removed-sourcemaps-from-nodejs",level:2},{value:"Other minor changes",id:"other-minor-changes",level:2}],c={toc:m};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"shifted-supported-platform-versions"},"Shifted supported platform versions"),(0,o.kt)("p",null,"Since Node.js v14 has reached ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/en/about/releases/"},"end of life"),", Packemon now\nrequires at minimum v16.12 and above to run. Furthermore, we're entirely dropping v12 support, and\nshifting v14 into ",(0,o.kt)("inlineCode",{parentName:"p"},"legacy"),", v16 into ",(0,o.kt)("inlineCode",{parentName:"p"},"stable"),", v18 into ",(0,o.kt)("inlineCode",{parentName:"p"},"current"),", and the new v19 into\n",(0,o.kt)("inlineCode",{parentName:"p"},"experimental"),". As part of this process, we are also bumping minimum requirements and coupled npm\nversions."),(0,o.kt)("p",null,"The updated ",(0,o.kt)("a",{parentName:"p",href:"/docs/config#support"},(0,o.kt)("inlineCode",{parentName:"a"},"support"))," compatibility table is as follows."),(0,o.kt)("h4",{id:"before"},"Before"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Legacy"),(0,o.kt)("th",{parentName:"tr",align:null},"Stable"),(0,o.kt)("th",{parentName:"tr",align:null},"Current"),(0,o.kt)("th",{parentName:"tr",align:null},"Experimental"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"node"),(0,o.kt)("td",{parentName:"tr",align:null},">= 12.22.0"),(0,o.kt)("td",{parentName:"tr",align:null},">= 14.15.0"),(0,o.kt)("td",{parentName:"tr",align:null},">= 16.12.0"),(0,o.kt)("td",{parentName:"tr",align:null},">= 18.0.0")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"npm"),(0,o.kt)("td",{parentName:"tr",align:null},">= 6.14.0"),(0,o.kt)("td",{parentName:"tr",align:null},">= 6.14.0"),(0,o.kt)("td",{parentName:"tr",align:null},">= 8.1.0"),(0,o.kt)("td",{parentName:"tr",align:null},">= 8.5.0")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"native"),(0,o.kt)("td",{parentName:"tr",align:null},"iOS 12"),(0,o.kt)("td",{parentName:"tr",align:null},"iOS 13"),(0,o.kt)("td",{parentName:"tr",align:null},"iOS 14"),(0,o.kt)("td",{parentName:"tr",align:null},"iOS 15")))),(0,o.kt)("h4",{id:"after"},"After"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Legacy"),(0,o.kt)("th",{parentName:"tr",align:null},"Stable"),(0,o.kt)("th",{parentName:"tr",align:null},"Current"),(0,o.kt)("th",{parentName:"tr",align:null},"Experimental"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"node"),(0,o.kt)("td",{parentName:"tr",align:null},">= 14.15.0"),(0,o.kt)("td",{parentName:"tr",align:null},">= 16.12.0"),(0,o.kt)("td",{parentName:"tr",align:null},">= 18.12.0"),(0,o.kt)("td",{parentName:"tr",align:null},">= 19.0.0")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"npm"),(0,o.kt)("td",{parentName:"tr",align:null},">= 6.14.0"),(0,o.kt)("td",{parentName:"tr",align:null},">= 8.1.0"),(0,o.kt)("td",{parentName:"tr",align:null},">= 8.19.0"),(0,o.kt)("td",{parentName:"tr",align:null},">= 9.0.0")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"native"),(0,o.kt)("td",{parentName:"tr",align:null},"iOS 13"),(0,o.kt)("td",{parentName:"tr",align:null},"iOS 14"),(0,o.kt)("td",{parentName:"tr",align:null},"iOS 15"),(0,o.kt)("td",{parentName:"tr",align:null},"iOS 16")))),(0,o.kt)("p",null,"Notable changes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining"},"Optional chaining"),",\n",(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"},"nullish coalescing"),"\nare no longer transformed for ",(0,o.kt)("em",{parentName:"li"},"all")," targets."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment"},"Logical assignment operators"),"\nare no longer transformed for ",(0,o.kt)("inlineCode",{parentName:"li"},"stable")," and up targets."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import"},"Dynamic import"),"\nis no longer transformed to ",(0,o.kt)("inlineCode",{parentName:"li"},"require()")," for all ",(0,o.kt)("inlineCode",{parentName:"li"},"node")," targets."),(0,o.kt)("li",{parentName:"ul"},"Node built-in imports will now use the ",(0,o.kt)("inlineCode",{parentName:"li"},"node:")," prefix.")),(0,o.kt)("h3",{id:"dropped-es5-support"},"Dropped ES5 support"),(0,o.kt)("p",null,"Furthermore, we have dropped ",(0,o.kt)("inlineCode",{parentName:"p"},"es5")," support from the ",(0,o.kt)("inlineCode",{parentName:"p"},"legacy")," target, and replaced it with ",(0,o.kt)("inlineCode",{parentName:"p"},"es2018"),".\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"stable")," target has also been updated to ",(0,o.kt)("inlineCode",{parentName:"p"},"es2019"),"."),(0,o.kt)("h2",{id:"no-longer-workspaces-aware-by-default"},"No longer workspaces aware by default"),(0,o.kt)("p",null,"Packemon was originally designed to work in both polyrepo's and monorepo's. When the ",(0,o.kt)("inlineCode",{parentName:"p"},"packemon"),"\ncommand was ran in a workspace root, it would apply to ",(0,o.kt)("em",{parentName:"p"},"all")," packages in the workspace. This was\npretty cool and worked great. However, it overcomplicated our implementation and required many poly\nvs mono checks everywhere. It was becoming a nightmare to maintain and ensure correct boundaries."),(0,o.kt)("p",null,"To remedy this, we refactored every piece of Packemon from the ground up to break these 2 patterns\napart. The ",(0,o.kt)("inlineCode",{parentName:"p"},"packemon build"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"packemon pack"),", and other commands (below) will only apply to 1\npackage now, the one found in the current working directory."),(0,o.kt)("p",null,"For workspaces, we've added new ",(0,o.kt)("inlineCode",{parentName:"p"},"packemon build-workspace")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"packemon pack-workspace")," commands,\nwhich mimic the previous functionality, and should be ran in the workspace root."),(0,o.kt)("h2",{id:"commands-must-now-be-ran-from-the-package-root"},"Commands must now be ran from the package root"),(0,o.kt)("p",null,"Because of the above change, all the primary commands -- ",(0,o.kt)("inlineCode",{parentName:"p"},"build"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"clean"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"files"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"init"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"pack"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"validate"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"watch")," -- must now be ran from the package root, as our tooling assumes the package is\nlocated in the current working directory. They can no longer be ran from the workspace root if using\na monorepo."),(0,o.kt)("p",null,"This does not apply to the ",(0,o.kt)("inlineCode",{parentName:"p"},"scaffold")," command (and the new ",(0,o.kt)("inlineCode",{parentName:"p"},"build-workspace")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"pack-workspace"),"\ncommands), as they should always be ran from the repository root."),(0,o.kt)("h2",{id:"typescript-declarations-now-require-explicitly-named-configs"},"TypeScript declarations now require explicitly named configs"),(0,o.kt)("p",null,"When the ",(0,o.kt)("inlineCode",{parentName:"p"},"--declaration")," option is passed, Packemon will generate TypeScript declarations for all\ninputs. This process would assume that a ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," existed in the package root. This file\ncould then be overridden with the ",(0,o.kt)("inlineCode",{parentName:"p"},"--declarationConfig")," option."),(0,o.kt)("p",null,"However, in TypeScript v4.7, the\n",(0,o.kt)("a",{parentName:"p",href:"https://devblogs.microsoft.com/typescript/announcing-typescript-4-7/#new-file-extensions"},"new ",(0,o.kt)("inlineCode",{parentName:"a"},".cts")," and ",(0,o.kt)("inlineCode",{parentName:"a"},".mts")," file extensions were released"),".\nWith this release, the declaration outputs have also changed, and may produce ",(0,o.kt)("em",{parentName:"p"},"different outputs"),"\ndepending on the source file type (cjs vs esm). Because of this, we can no longer generate\ndeclarations ",(0,o.kt)("em",{parentName:"p"},"for all formats using a single tsconfig"),", especially when building multiple formats in\nparallel!"),(0,o.kt)("p",null,"To solve this problem, Packemon now requires a ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.<format>.json")," file. For example, if you're\nbuilding the formats ",(0,o.kt)("inlineCode",{parentName:"p"},"lib")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"esm"),", you'll now need ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.lib.json")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.esm.json"),"\nfiles. This ",(0,o.kt)("em",{parentName:"p"},"cannot")," be changed, as as such, the ",(0,o.kt)("inlineCode",{parentName:"p"},"--declarationConfig")," option has been removed."),(0,o.kt)("h2",{id:"typescript-declaration-output-directory-has-changed"},"TypeScript declaration output directory has changed"),(0,o.kt)("p",null,"As a side-effect of the change above, the output directory of declarations have also changed.\nInstead of generating to a ",(0,o.kt)("inlineCode",{parentName:"p"},"dts")," folder, they will now generate to the format folders, ",(0,o.kt)("inlineCode",{parentName:"p"},"lib"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"esm"),",\netc."),(0,o.kt)("p",null,"If using project references, you'll need to manually update ",(0,o.kt)("inlineCode",{parentName:"p"},"outDir")," as we cannot pass the\n",(0,o.kt)("inlineCode",{parentName:"p"},"--outDir")," option for composite builds."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "extends": "../../tsconfig.options.json",\n  "compilerOptions": {\n    "outDir": "lib"\n  },\n  "include": ["src/**/*"]\n}\n')),(0,o.kt)("h2",{id:"package-exports-have-changed"},"Package ",(0,o.kt)("inlineCode",{parentName:"h2"},"exports")," have changed"),(0,o.kt)("p",null,"To support the TypeScript differences mentioned above, the ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," ",(0,o.kt)("inlineCode",{parentName:"p"},"exports")," had to also\nchange. Instead of having a ",(0,o.kt)("inlineCode",{parentName:"p"},"types")," export at the top-level, it will now be nested within ",(0,o.kt)("inlineCode",{parentName:"p"},"import"),"\nor ",(0,o.kt)("inlineCode",{parentName:"p"},"require"),", depending on the format and combinations. This also means that ",(0,o.kt)("inlineCode",{parentName:"p"},"import")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"require"),"\nmay have different type declarations if need be."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'// Before\n".": {\n  "types": "./dts/index.d.ts",\n  "node": "./lib/index.js",\n  "default": "./lib/index.js"\n}\n\n// After\n".": {\n  "node": {\n    "types": "./lib/index.d.ts",\n    "default": "./lib/index.js"\n  },\n  "default": "./lib/index.js"\n}\n')),(0,o.kt)("h2",{id:"publishable-files-are-now-lenient"},"Publishable files are now lenient"),(0,o.kt)("p",null,"When the ",(0,o.kt)("inlineCode",{parentName:"p"},"--addFiles")," option is passed, we update the ",(0,o.kt)("inlineCode",{parentName:"p"},"files")," field in the package's ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),"\nwith a whitelist of files that should be published. Previously, this would use a glob with a strict\nmatch on file extension, for example ",(0,o.kt)("inlineCode",{parentName:"p"},"src/**/*.{ts,tsx,json}")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"cjs/**/*.{cjs,mjs,map}"),"."),(0,o.kt)("p",null,"With the amount of file extensions now available in the JavaScript ecosystem, this has become very\ntedious to determine accurately, and as such, these globs have dropped the file extension\nrequirement. For example, these are simply now ",(0,o.kt)("inlineCode",{parentName:"p"},"src/**/*")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"cjs/**/*"),"."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Do note, we ",(0,o.kt)("em",{parentName:"p"},"do not")," remove the previous globs, so you'll need to manually fix each\n",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),"!")),(0,o.kt)("h2",{id:"removed-sourcemaps-from-nodejs"},"Removed sourcemaps from Node.js"),(0,o.kt)("p",null,"Packemon would always create sourcemaps, as it provides a mechanism for consumers to debug issues\nwith their code, specifically when it was bundled with Webpack or Metro. However, this wasn't really\nnecessary for Node.js packages, as they are typically developer tooling or scripts related, and ",(0,o.kt)("em",{parentName:"p"},"are\nnot")," bundled. Consumers can inspect ",(0,o.kt)("inlineCode",{parentName:"p"},"node_modules")," directly to debug these packages."),(0,o.kt)("p",null,"Because of this, we have removed sourcemaps entirely from Node.js based packages. This will grealy\nreduce the overall package size."),(0,o.kt)("h2",{id:"other-minor-changes"},"Other minor changes"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"pack")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"pack-workspace")," commands will automatically set ",(0,o.kt)("inlineCode",{parentName:"li"},"NODE_ENV=production")," now."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"type")," field in ",(0,o.kt)("inlineCode",{parentName:"li"},"package.json")," will no longer be set."),(0,o.kt)("li",{parentName:"ul"},"Removed most of the React/Ink integration for rendering to the terminal, as it was major\nbottleneck for performance."),(0,o.kt)("li",{parentName:"ul"},"Removed ",(0,o.kt)("inlineCode",{parentName:"li"},"babelrcRoots")," support from our internal Babel configuration."),(0,o.kt)("li",{parentName:"ul"},"Removed the ",(0,o.kt)("inlineCode",{parentName:"li"},"engines")," version constraint feature."),(0,o.kt)("li",{parentName:"ul"},"Removed the ",(0,o.kt)("inlineCode",{parentName:"li"},"npm")," engine when adding engines with ",(0,o.kt)("inlineCode",{parentName:"li"},"--addEngines"),"."),(0,o.kt)("li",{parentName:"ul"},"Removed the ",(0,o.kt)("inlineCode",{parentName:"li"},"--files")," option from ",(0,o.kt)("inlineCode",{parentName:"li"},"packemon validate"),".")))}u.isMDXComponent=!0}}]);
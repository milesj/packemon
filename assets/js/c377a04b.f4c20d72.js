"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5742],{2086:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var i=t(2540),r=t(3023);const o={title:"Introduction",slug:"/"},s=void 0,a={id:"index",title:"Introduction",description:"Are you a library maintainer? Confused on how to build packages for consumers? Unsure of what",source:"@site/docs/index.md",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,unlisted:!1,editUrl:"https://github.com/milesj/packemon/edit/master/website/docs/index.md",tags:[],version:"current",frontMatter:{title:"Introduction",slug:"/"},sidebar:"docs",next:{title:"Installation",permalink:"/docs/install"}},l={},c=[{value:"Features",id:"features",level:2},{value:"Requirements",id:"requirements",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Are you a library maintainer? Confused on how to build packages for consumers? Unsure of what\ntooling and plugins to use? What about CommonJS vs ECMAScript? TypeScript, JavaScript, or FlowType?\nForget that headache and let Packemon do the heavy lifting for you. No need to fiddle with Babel or\nRollup configurations!"}),"\n",(0,i.jsx)(n.p,{children:'Packemon is a "batteries included" CLI that will prepare each package for distribution by building\nwith the proper tooling and plugins, provide sane defaults and configurations, verify package\nrequirements, and much more! By default Packemon will generate ECMAScript modules, but can be\nconfigured to support all formats.'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"./install",children:"Sound great? Let's get started!"})}),"\n",(0,i.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Scaffold TypeScript packages, in either a monorepo or polyrepo project setup."}),"\n",(0,i.jsx)(n.li,{children:"Configure packages for Node.js, Web browsers, React Native, or Electron, with multiple output\nformats like CommonJS and ECMAScript."}),"\n",(0,i.jsx)(n.li,{children:"Build packages with Rollup to create self-contained and tree-shaken bundles. Provide the smallest\nfile sizes possible!"}),"\n",(0,i.jsx)(n.li,{children:"Support a single index import, multiple imports, deep imports, or any kind of entry point."}),"\n",(0,i.jsxs)(n.li,{children:["Transform packages with Babel's ",(0,i.jsx)(n.code,{children:"preset-env"})," and the configured platform targets. Only ship and\npolyfill what's truly necessary!"]}),"\n",(0,i.jsx)(n.li,{children:"Generate and combine TypeScript declarations into a single public-only API representation."}),"\n",(0,i.jsx)(n.li,{children:"Generate compact source maps for platform + format based builds."}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./features",children:"And many more..."})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Linux, OSX, Windows"}),"\n",(0,i.jsx)(n.li,{children:"Node 16.12+"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},3023:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(3696);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);
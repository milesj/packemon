"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8672],{2443:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>t});var i=s(2540),l=s(3023);const r={title:"Features & optimizations"},o=void 0,a={id:"features",title:"Features & optimizations",description:"Babel configuration",source:"@site/docs/features.md",sourceDirName:".",slug:"/features",permalink:"/docs/features",draft:!1,unlisted:!1,editUrl:"https://github.com/milesj/packemon/edit/master/website/docs/features.md",tags:[],version:"current",frontMatter:{title:"Features & optimizations"},sidebar:"docs",previous:{title:"Setup & requirements",permalink:"/docs/setup"},next:{title:"Package configuration",permalink:"/docs/config"}},c={},t=[{value:"Babel configuration",id:"babel-configuration",level:2},{value:"Presets",id:"presets",level:3},{value:"Plugins",id:"plugins",level:3},{value:"Rollup configuration",id:"rollup-configuration",level:2},{value:"Plugins",id:"plugins-1",level:3},{value:"Development and production targets",id:"development-and-production-targets",level:2},{value:"Automatic package <code>exports</code>",id:"automatic-package-exports",level:2},{value:"Tree-shaking optimization",id:"tree-shaking-optimization",level:2},{value:"Code-splitting aware",id:"code-splitting-aware",level:2},{value:"React JSX transforms",id:"react-jsx-transforms",level:2},{value:"Asset imports",id:"asset-imports",level:2},{value:"Environment constants",id:"environment-constants",level:2},{value:"Invariant checks",id:"invariant-checks",level:2},{value:"Automatic <code>.mjs</code> wrappers for <code>.cjs</code> inputs",id:"automatic-mjs-wrappers-for-cjs-inputs",level:2},{value:"CommonJS &amp; ECMAScript interoperability",id:"commonjs--ecmascript-interoperability",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"babel-configuration",children:"Babel configuration"}),"\n",(0,i.jsxs)(n.p,{children:["All packages are parsed and transpiled with ",(0,i.jsx)(n.a,{href:"https://babeljs.io",children:"Babel"})," (through Rollup). The presets and plugins\nused are automatically determined on a package-by-package basis, by inspecting the package's root\nfiles and respective ",(0,i.jsx)(n.code,{children:"package.json"})," (and root ",(0,i.jsx)(n.code,{children:"package.json"})," if using workspaces)."]}),"\n",(0,i.jsx)(n.h3,{id:"presets",children:"Presets"}),"\n",(0,i.jsx)(n.p,{children:"The environment preset is always enabled and configures the following."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@babel/preset-env"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Defines ",(0,i.jsx)(n.code,{children:"modules"})," and ",(0,i.jsx)(n.code,{children:"targets"})," based on the chosen ",(0,i.jsx)(n.a,{href:"/docs/config#platforms",children:"platform"})," and\n",(0,i.jsx)(n.a,{href:"/docs/config#formats",children:"format"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Enables ",(0,i.jsx)(n.code,{children:"spec"})," in development for testing compliance."]}),"\n",(0,i.jsxs)(n.li,{children:["Enables ",(0,i.jsx)(n.code,{children:"bugfixes"})," and ",(0,i.jsx)(n.code,{children:"shippedProposals"})," for smaller file sizes."]}),"\n",(0,i.jsxs)(n.li,{children:["Disables ",(0,i.jsx)(n.code,{children:"useBuiltIns"})," as consumers of the package should polyfill accordingly."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The following presets are enabled when one of their conditions are met."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@babel/preset-flow"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Package or root contains a ",(0,i.jsx)(n.code,{children:"flow-bin"})," dependency."]}),"\n",(0,i.jsxs)(n.li,{children:["Project contains a ",(0,i.jsx)(n.code,{children:".flowconfig"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@babel/preset-typescript"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Package or root contains a ",(0,i.jsx)(n.code,{children:"typescript"})," dependency."]}),"\n",(0,i.jsxs)(n.li,{children:["Package contains a ",(0,i.jsx)(n.code,{children:"tsconfig.json"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@babel/preset-react"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Package contains a ",(0,i.jsx)(n.code,{children:"react"})," dependency."]}),"\n",(0,i.jsxs)(n.li,{children:["Enables the new ",(0,i.jsx)(n.a,{href:"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html",children:"JSX transform"})," if the dependency range captures the minimum requirement."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"babel-preset-solid"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Package contains a ",(0,i.jsx)(n.code,{children:"solid-js"})," dependency."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"plugins",children:"Plugins"}),"\n",(0,i.jsx)(n.p,{children:"The following plugins are enabled when one of their conditions are met."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@babel/plugin-proposal-decorators"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Enabled when package is TypeScript aware and defines ",(0,i.jsx)(n.code,{children:"experimentalDecorators"})," in\n",(0,i.jsx)(n.code,{children:"tsconfig.json"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#environment-constants",children:(0,i.jsx)(n.code,{children:"babel-plugin-env-constants"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Always enabled. Will transform ",(0,i.jsx)(n.code,{children:"__DEV__"}),", ",(0,i.jsx)(n.code,{children:"__PROD__"}),", and ",(0,i.jsx)(n.code,{children:"__TEST__"})," to ",(0,i.jsx)(n.code,{children:"process.env.NODE_ENV"}),"\nexpressions."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#invariant-checks",children:(0,i.jsx)(n.code,{children:"babel-plugin-conditional-invariant"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Always enabled. Will wrap ",(0,i.jsx)(n.code,{children:"invariant()"})," calls with ",(0,i.jsx)(n.code,{children:"process.env.NODE_ENV"})," conditionals."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#commonjs--ecmascript-interoperability",children:(0,i.jsx)(n.code,{children:"babel-plugin-cjs-esm-interop"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Enabled when package ",(0,i.jsx)(n.a,{href:"/docs/config#platforms",children:"platform"})," is configured to ",(0,i.jsx)(n.code,{children:"node"}),". Will convert ESM\ncode to CJS and vice-versa."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"rollup-configuration",children:"Rollup configuration"}),"\n",(0,i.jsxs)(n.p,{children:["While Babel handles the parsing and transformation of source files, ",(0,i.jsx)(n.a,{href:"https://rollupjs.org",children:"Rollup"})," bundles all\nentry point dependent source files into a single tree-shaken distributable file. This vastly reduces\nthe file size, require/import times, evaluation speed, and more."]}),"\n",(0,i.jsx)(n.p,{children:'However, configuring Rollup can be quite daunting. Because of this, the entire layer is abstracted\naway behind Packemon, and should just "work" when packages are configured correctly. Our abstraction\nabides the following:'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["For every input in a package's ",(0,i.jsx)(n.a,{href:"/docs/config#inputs",children:"inputs"})," setting, an output file will be\ncreated."]}),"\n",(0,i.jsxs)(n.li,{children:["For every ",(0,i.jsx)(n.a,{href:"/docs/config#platforms",children:"platform"})," and ",(0,i.jsx)(n.a,{href:"/docs/config#formats",children:"format"})," in a package, a\nunique output file will be created."]}),"\n",(0,i.jsx)(n.li,{children:"Every Node.js built-in module is configured as external."}),"\n",(0,i.jsx)(n.li,{children:"Every package dependency is configured as external."}),"\n",(0,i.jsx)(n.li,{children:"Always reduces file size as much as possible by utilizing tree-shaking."}),"\n",(0,i.jsx)(n.li,{children:'Allows input files to reference other input files to mitigate "instance of" and "reference"\nissues.'}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"plugins-1",children:"Plugins"}),"\n",(0,i.jsx)(n.p,{children:"The following plugins are enabled per package."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@rollup/plugin-node-resolve"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Resolves imports using Node.js module resolution."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@rollup/plugin-commonjs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Converts CommonJS externals to ECMAScript for bundling capabilities."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@rollup/plugin-json"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Allows JSON files to be imported (default export only)."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@rollup/plugin-babel"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Parses and transforms source code using Babel."}),"\n",(0,i.jsx)(n.li,{children:"Excludes test related files from transformation."}),"\n",(0,i.jsx)(n.li,{children:"Inlines runtime helpers in the output file."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rollup-plugin-node-externals"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Defines ",(0,i.jsx)(n.code,{children:"externals"})," based on ",(0,i.jsx)(n.code,{children:"package.json"})," dependencies."]}),"\n",(0,i.jsxs)(n.li,{children:["Includes ",(0,i.jsx)(n.code,{children:"dependencies"}),", ",(0,i.jsx)(n.code,{children:"devDependencies"}),", ",(0,i.jsx)(n.code,{children:"peerDependencies"}),", and ",(0,i.jsx)(n.code,{children:"optionalDependencies"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rollup-plugin-polyfill-node"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Polyfills Node.js built-in modules when platform is ",(0,i.jsx)(n.code,{children:"browser"})," or ",(0,i.jsx)(n.code,{children:"native"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Custom"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Prepend a Node.js shebang to ",(0,i.jsx)(n.code,{children:"bin.*"})," output files."]}),"\n",(0,i.jsx)(n.li,{children:"Process imported assets and share between formats."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"development-and-production-targets",children:"Development and production targets"}),"\n",(0,i.jsxs)(n.p,{children:["Packemon configures Babel internally based on ",(0,i.jsx)(n.code,{children:"NODE_ENV"}),". When in development (default), code is\ntranspiled for spec compliance and debugging purposes, while in production for performance. We\nsuggest running ",(0,i.jsx)(n.code,{children:"packemon build"})," for development, and ",(0,i.jsx)(n.code,{children:"packemon pack"})," for production (before a\nrelease)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"packemon build # development\npackemon pack # production\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"automatic-package-exports",children:["Automatic package ",(0,i.jsx)(n.code,{children:"exports"})]}),"\n",(0,i.jsxs)(n.p,{children:["When the ",(0,i.jsx)(n.code,{children:"--addExports"})," CLI option is enabled, Packemon will automatically generate an ",(0,i.jsx)(n.code,{children:"exports"}),"\nfield in ",(0,i.jsx)(n.code,{children:"package.json"}),", based on the configured inputs, formats, and platforms for the package.\nPackemon will do its best to map the configuration to exports conditions, such as ",(0,i.jsx)(n.code,{children:"browser"}),", ",(0,i.jsx)(n.code,{children:"node"}),",\n",(0,i.jsx)(n.code,{children:"import"}),", etc. When ",(0,i.jsx)(n.code,{children:"--declaration"})," is passed, it'll also include the ",(0,i.jsx)(n.code,{children:"types"})," condition for\nTypeScript."]}),"\n",(0,i.jsxs)(n.p,{children:["As a demonstration, this is the ",(0,i.jsx)(n.code,{children:"packemon"})," package itself:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "exports": {\n    "./package.json": "./package.json",\n    "./babel": {\n      "types": "./mjs/babel.d.ts",\n      "import": "./mjs/babel.mjs"\n    },\n    "./bin": {\n      "types": "./mjs/bin.d.ts",\n      "import": "./mjs/bin.mjs"\n    },\n    ".": {\n      "types": "./mjs/index.d.ts",\n      "import": "./mjs/index.mjs"\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"tree-shaking-optimization",children:"Tree-shaking optimization"}),"\n",(0,i.jsxs)(n.p,{children:["When a package is ",(0,i.jsx)(n.a,{href:"/docs/config#bundle",children:"bundled"}),", tree-shaking and pure annotations are automatically\nenabled through the Rollup build. This feature also takes multiple inputs (entry points) into\naccount and chunks the bundled code accordingly."]}),"\n",(0,i.jsx)(n.h2,{id:"code-splitting-aware",children:"Code-splitting aware"}),"\n",(0,i.jsxs)(n.p,{children:["Make use of ",(0,i.jsx)(n.code,{children:"import()"})," and Packemon will ensure proper code-splitting for consumers. Packemon will\npersist dynamic imports when the the target platform and supported version can utilize the feature\nnatively, otherwise it is transpiled down."]}),"\n",(0,i.jsx)(n.h2,{id:"react-jsx-transforms",children:"React JSX transforms"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html",children:"JSX"})," supports 2 patterns for transforming code: the ",(0,i.jsx)(n.code,{children:"classic"})," pattern where\n",(0,i.jsx)(n.code,{children:"import React from 'react'"})," is required, and the new ",(0,i.jsx)(n.code,{children:"automatic"})," pattern where the import can be\nomitted. Packemon will automatically choose a pattern based on the ",(0,i.jsx)(n.code,{children:"react"})," dependency found in a\npackage's ",(0,i.jsx)(n.code,{children:"package.json"}),", by verifying the version satisfies the minimin requirement."]}),"\n",(0,i.jsxs)(n.p,{children:["The version can be defined as a ",(0,i.jsx)(n.code,{children:"peerDependencies"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "peerDependencies": {\n    "react": ">=17.0.0"\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Or the version can be defined as a normal ",(0,i.jsx)(n.code,{children:"dependencies"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "dependencies": {\n    "react": "^17.0.0"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"asset-imports",children:"Asset imports"}),"\n",(0,i.jsxs)(n.p,{children:["When a file imports an asset\n(",(0,i.jsx)(n.a,{href:"https://github.com/milesj/packemon/blob/master/packages/packemon/src/constants.ts#L12",children:"styles, images, audio, video"}),"),\nthe import remains in-tact so any bundlers can handle accordingly. However, assets are moved to a\nshared ",(0,i.jsx)(n.code,{children:"assets"})," folder, are hashed for uniqueness, and any imports are modified to this new path."]}),"\n",(0,i.jsx)(n.p,{children:"An example of this as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Input:\n//  src/components/Button/index.ts\n//  src/components/Button/button.css\nimport './button.css';\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Output:\n//  esm/components/Button/index.js\n//  assets/button-as17p2k9.css\nimport '../../../assets/button-as17p2k9.css';\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"UMD builds do not support asset imports!"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"environment-constants",children:"Environment constants"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/babel-plugin-env-constants",children:"babel-plugin-env-constants"})," plugin is\nalways enabled, which will transform ",(0,i.jsx)(n.code,{children:"__DEV__"}),", ",(0,i.jsx)(n.code,{children:"__PROD__"}),", and ",(0,i.jsx)(n.code,{children:"__TEST__"})," constants to\n",(0,i.jsx)(n.code,{children:"process.env.NODE_ENV"})," conditionals."]}),"\n",(0,i.jsx)(n.p,{children:"When this code is ran through a minifier like Terser, any non-production checks will be removed\nthrough a process known as dead-code elimination. This will greatly reduce bundle size on consumers!"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Input\nif (__DEV__) {\n  console.log('Some message in development!');\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Output\nif (process.env.NODE_ENV !== 'production') {\n  console.log('Some message in development!');\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you are using TypeScript, you'll most likely need to declare the globals yourself."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"declare global {\n  var __DEV__: boolean;\n  var __PROD__: boolean;\n  var __TEST__: boolean;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"invariant-checks",children:"Invariant checks"}),"\n",(0,i.jsxs)(n.p,{children:["The\n",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/babel-plugin-conditional-invariant",children:"babel-plugin-conditional-invariant"}),"\nplugin is always enabled, which will wrap ",(0,i.jsx)(n.code,{children:"invariant()"})," function checks in ",(0,i.jsx)(n.code,{children:"process.env.NODE_ENV"}),"\nconditionals that only run in development."]}),"\n",(0,i.jsx)(n.p,{children:"When this code is ran through a minifier like Terser, all invariant checks will be removed through a\nprocess known as dead-code elimination, just like environment constants above!"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Input\ninvariant(value === false, 'Value must be falsy!');\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Output\nif (process.env.NODE_ENV !== 'production') {\n  invariant(value === false, 'Value must be falsy!');\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"automatic-mjs-wrappers-for-cjs-inputs",children:["Automatic ",(0,i.jsx)(n.code,{children:".mjs"})," wrappers for ",(0,i.jsx)(n.code,{children:".cjs"})," inputs"]}),"\n",(0,i.jsxs)(n.p,{children:["Publishing a package that contains builds for both ",(0,i.jsx)(n.code,{children:".cjs"})," and ",(0,i.jsx)(n.code,{children:".mjs"})," may result in the\n",(0,i.jsx)(n.a,{href:"https://nodejs.org/api/packages.html#dual-commonjses-module-packages",children:"dual package hazard"})," problem.\nPackemon attempts to mitigate this problem by only allowing 1 format. However, when publishing\n",(0,i.jsx)(n.code,{children:".cjs"})," code, a consumer ",(0,i.jsx)(n.em,{children:"cannot"})," used named imports within an ",(0,i.jsx)(n.code,{children:".mjs"})," file as one would expect (since\nCommonJS has no concept of default and named exports), as demonstrated below."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="package/cjs/index.cjs"',children:"exports.name = 'value';\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="index.mjs"',children:"// Invalid\nimport { name } from 'package';\n\n// Valid\nimport cjsPackage from 'package';\n\nconst { name } = cjsPackage;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This is rather annoying, as it does not align with ",(0,i.jsx)(n.code,{children:"import"}),"/",(0,i.jsx)(n.code,{children:"export"})," assumptions, and also makes it\nharder for consumers to migrate to ESM based code (",(0,i.jsx)(n.code,{children:".mjs"}),"). However, there is a solution to this\nproblem,\n",(0,i.jsx)(n.a,{href:"https://nodejs.org/api/packages.html#approach-1-use-an-es-module-wrapper",children:"using an ESM wrapper"}),".\nPackemon supports this as a first-class feature, and when the ",(0,i.jsx)(n.a,{href:"/docs/config#formats",children:(0,i.jsx)(n.code,{children:"format"})})," is\n",(0,i.jsx)(n.code,{children:"cjs"}),", the following functionality is automatically enabled:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A wrapper ",(0,i.jsx)(n.code,{children:".mjs"})," file is emitted for each ",(0,i.jsx)(n.a,{href:"/docs/config#inputs",children:"input"}),", that re-exports all values\nfound in the base ",(0,i.jsx)(n.code,{children:".cjs"})," file."]}),"\n",(0,i.jsxs)(n.li,{children:["If ",(0,i.jsx)(n.code,{children:"--addExports"})," is enabled, will append an ",(0,i.jsx)(n.code,{children:"import"})," exports conditional."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Based on this information and the examples above, our imports now work as expected!"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="package/cjs/index.cjs"',children:"exports.name = 'value';\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="package/cjs/index-wrapper.mjs"',children:"import data from 'package';\n\nexport const { name } = data;\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="index.mjs"',children:"// Works now!\nimport { name } from 'package';\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:['This is a great solution for packages that want to offer "modules" but are unable to fully migrate\nto ESM. If you ',(0,i.jsx)(n.em,{children:"do not"})," want this functionality, use the ",(0,i.jsx)(n.code,{children:"lib"})," format instead."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"commonjs--ecmascript-interoperability",children:"CommonJS & ECMAScript interoperability"}),"\n",(0,i.jsxs)(n.p,{children:["Packemon by default encourages ",(0,i.jsx)(n.a,{href:"./esm",children:"ECMAScript modules"}),", but not everyone is there yet. To bridge\nthis gap, we enable the\n",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/babel-plugin-cjs-esm-interop",children:"babel-plugin-cjs-esm-interop"})," plugin,\nwhich transforms CommonJS code (",(0,i.jsx)(n.code,{children:".cjs"}),", ",(0,i.jsx)(n.code,{children:".js"}),") into ECMAScript module code (",(0,i.jsx)(n.code,{children:".mjs"}),", ",(0,i.jsx)(n.code,{children:".js"})," with\nmodule type), and vice versa, based on the\n",(0,i.jsx)(n.a,{href:"https://nodejs.org/api/esm.html#esm_differences_between_es_modules_and_commonjs",children:"official Node.js documentation"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Input: mjs\nconst self = import.meta.url;\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Output: cjs\nconst self = __filename;\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},3023:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(3696);const l={},r=i.createContext(l);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);